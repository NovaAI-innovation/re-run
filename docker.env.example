# Example Docker Environment Configuration
# Copy this file to docker.env and fill in your actual values

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrsTUVwxyz
TELEGRAM_BOT_USERNAME=@your_bot_username

# Google AI Configuration
GOOGLE_API_KEY=AIzaSyABC123DEF456GHI789JKL012MNO345PQR678
GEMINI_MODEL=google-gla:gemini-1.5-flash

# AI Agent Configuration
SYSTEM_PROMPT=You are a helpful AI assistant integrated with a Telegram bot. Respond to user messages in a friendly and informative way. Keep responses concise but helpful.
MAX_RESPONSE_LENGTH=4096

# Application Configuration
LOG_LEVEL=INFO
POLLING_INTERVAL=1
MAX_REQUESTS_PER_MINUTE=60
REQUEST_TIMEOUT=30

# Environment type (development/production)
ENVIRONMENT=production

# Conversation Persistence Configuration
PERSISTENCE_ENABLED=true
PERSISTENCE_TYPE=json
# Options: "json" or "database"

# JSON Storage Configuration (when PERSISTENCE_TYPE=json)
JSON_STORAGE_DIR=data/conversations

# Database Configuration (when PERSISTENCE_TYPE=database)
# For SQLite: sqlite:///data/conversations.db
# For PostgreSQL: postgresql://user:password@localhost/dbname
DATABASE_URL=sqlite:///data/conversations.db

# Conversation Management
MAX_CONVERSATIONS_PER_USER=100
CONTEXT_WINDOW_SIZE=10
AUTO_SUMMARIZE_THRESHOLD=50
CLEANUP_OLD_DATA_DAYS=30

# MCP Configuration
MCP_ENABLED=false
# Path to JSON file with MCP server configurations, or inline JSON string
MCP_SERVERS_CONFIG=config/mcp_servers.json  
MCP_SAMPLING_ENABLED=true

# Advanced Model Configuration
# Enable fallback to OpenAI GPT-4o-mini for improved reliability
FALLBACK_MODEL_ENABLED=false
# OpenAI API key (required if FALLBACK_MODEL_ENABLED=true)
OPENAI_API_KEY=sk-your-openai-api-key-here
# Enable Google model thinking capability for complex reasoning tasks
ENABLE_THINKING=false

# Docker-specific configurations
# Timezone for the container
TZ=UTC

# Python specific
PYTHONPATH=/app/src
