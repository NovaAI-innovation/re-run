# Docker Compose configuration for the Async Telegram Bot
# This file defines the services needed to run the application

services:
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: async-telegram-bot
    restart: unless-stopped
    
    # Environment variables from docker.env file
    env_file:
      - docker.env
    
    # Mount volumes for persistent data
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    
    # Health check
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Network configuration (optional, creates default network)
    networks:
      - bot-network

  # Optional: PostgreSQL database service
  # Uncomment this service if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: telegram-bot-db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: telegram_bot
  #     POSTGRES_USER: bot_user
  #     POSTGRES_PASSWORD: your_secure_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - bot-network
  #   ports:
  #     - "5432:5432"  # Remove this line in production

  # Optional: Redis for caching (if you want to add caching functionality)
  # redis:
  #   image: redis:7-alpine
  #   container_name: telegram-bot-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - bot-network
  #   ports:
  #     - "6379:6379"  # Remove this line in production

networks:
  bot-network:
    driver: bridge

# Uncomment if using PostgreSQL or Redis
# volumes:
#   postgres_data:
#   redis_data:
